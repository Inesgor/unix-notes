#!/bin/sh  
#
#	STANDARD(?) UNIX NOTES 
#
# This is Unix Notes. An GPG encrypted notes system designed for privacy
#
# The idea came from 'pass' the standard unix password manager

# VARIABLES
VERSION=0.1
#NOTES_UMASK='077'
NOTESDIR="${HOME}/.notes"
DEFAULT_NOTEBOOK="${NOTESDIR}/notes"
DEFAULT_POINTER="${NOTESDIR}/DEFAULT"
USE_POINTER="${NOTESDIR}/USE"
GPGKEY=''
GPG_OPTS="--quiet --yes --compress-algo=none --no-encrypt-to" 
GPG="gpg"

#
# initialize notes system
#

cmd_init (){		# setup directories and GPG key  to be used

	# set umask to this user only
	umask "${NOTES_UMASK:-077}"

	# make notes directory
	if [ ! -d "$NOTESDIR" ]; then
		echo Creating notes directory:  $NOTESDIR
		mkdir $NOTESDIR
	fi

	create_config

	# make default notebook
	echo making default notebook \'${DEFAULT_NOTEBOOK}\' 
	if [ ! -d "$DEFAULT_NOTEBOOK" ]; then
		mkdir $DEFAULT_NOTEBOOK
		echo Your default notebook $DEFAULT_NOTEBOOK has been created you may now create notes

		if [ ! -f "$DEFAULT_POINTER" ] ; then
			# point to DEFAULT_NOTEBOOK 
			ln -s $DEFAULT_NOTEBOOK $DEFAULT_POINTER 
		fi

		if [ ! -f "$USE_POINTER" ] ; then
			# point to DEFAULT_NOTEBOOK 
			ln -s $DEFAULT_NOTEBOOK $USE_POINTER 
		fi
	fi
}

create_config () {
	touch $NOTESDIR/config
	chmod 600 $NOTESDIR/config

	echo You have the following private keys on your keyring
	gpg -K

	echo By DEFAULT I will use the first key found as the key for encrypting
	echo If this is NOT what is required please edit $NOTESDIR/config to
	echo reflect the recipient you wish to use 
	echo You will need to edit the KEY parameter and set it to the email 
	echo address of the key you wish to use

	KEY="`gpg -K | grep uid | head -1 | sed 's/>$//; s/^.*<//'`"
	echo "KEY	$KEY" > $NOTESDIR/config

	echo Default config written:
	cat  $NOTESDIR/config
}

get_recipient() {
	KEY=`grep KEY $NOTESDIR/config | sed s/^KEY// | tr -d [:blank:]`
}

#
# note functions
#

note-add() {
	notefile="$USE_POINTER/$@"
	
	if [ -f "$notefile.gpg" ] ; then
		echo File exists ... cannot create
	else
		get_recipient 

		touch "$notefile"

		# create temporary note file
		$EDITOR "$notefile"

		# spell check
		#aspell -c "$notefile"

		# encrypt note file
		$GPG -e -r $KEY $GPG_OPTS "$notefile"

		# delete temporary note file now that ${notefile}.gpgs now created 
		rm "$notefile"
	fi
}

note-import() {
	toimport="$@"
	notefile="`basename ${toimport}`"

	get_recipient
	
	if [ -f "${toimport}" ] ; then 
		$GPG -e -r $KEY $GPG_OPTS -o  "${USE_POINTER}/${notefile}.gpg" "${notefile}" 
	fi
}

note-view() {
	notefile="$USE_POINTER/$@"

	get_recipient
	
	if [ -f "${notefile}" ]; then 
		gpg -d "${notefile}" | ${PAGER:-more} 
	elif [ -f "${notefile}.gpg" ]; then 
		gpg -d "${notefile}.gpg" | ${PAGER:-more}
	else 
		echo Note file does not exist
	fi
}

note-edit() {
	notefile="$USE_POINTER/$@"
	decrypted="`echo ${notefile} | sed s/.gpg//`"
	
	get_recipient 

	echo $notefile
	echo $decrypted
	
	if [ -f "$notefile" ]; then 
		gpg -d -o "${decrypted}" "${notefile}" 
		${EDITOR} "${decrypted}" 
		$GPG -e -r $KEY $GPG_OPTS "${decrypted}"
		rm ${decrypted}
	elif [ -f "${notefile}.gpg" ]; then 
		gpg -d -o "${decrypted}"  "${notefile}.gpg" 
		${EDITOR} "${decrypted}" 
		$GPG -e -r $KEY $GPG_OPTS "${decrypted}"
		rm ${decrypted}
	else 
		echo Note file does not exist
	fi
}

note-list() {
	ls "${USE_POINTER}" | column | more 
}

note-delete() {
	notefile="$USE_POINTER/$@"
	
	if [ -f "$notefile" ]; then 
		rm -i "$notefile" 
	elif [ -f "${notefile}.gpg" ]; then 
		rm -i "${notefile}.gpg" 
	else 
		echo Note file does not exist
	fi
}

note-rename() {
	MVCP="$1"
	shift
	notefile="$USE_POINTER/$@"
	read -p "Please enter new name for note: "  newname

	case $notefile in
		*gpg) skip;;
		*) notefile="${notefile}.gpg"
	esac 

	newnotefile="${USE_POINTER}/${newname}"
	case $newnotefile in
		*gpg) skip;;
		*) newnotefile="${newnotefile}.gpg"
	esac 

	case $MVCP in 
		"cp")	processing="copying ";;
		"mv")	processing="moving ";;
	esac

	if [ -f "$notefile" ] ; then
		echo $notefile exists .... $processing
		$MVCP  "$notefile" "$newnotefile"
	elif [ -f "${notefile}.gpg" ] ; then 
		echo $notefile exists .... $processing
		$MVCP   "$notefile" "$newnotefile"
	else
		echo Note $notefile does not exist, aborting...
	fi
}

#
# notebook functions
#

notebook-add() {
	new_notebook="${NOTESDIR}/$@"
	if [ ! -d "$new_notebook" ] ; then
		mkdir "$new_notebook"
		chmod 700 "$new_notebook"
		echo Created new notebook called $new_notebook
	else
		echo Notebook exists ... cannot create
	fi
}

notebook-delete() {
	notebook="${NOTESDIR}/$@"
	if [ ! -d "${notebook}" ] ; then
		echo Error: Notebook \'$notebook\' does not exist
		exit 1
	else
		echo Deleting files from $notebook
		rm -i ${notebook}/*.gpg
		
		if [ $? = 0 ] ; then 
			rmdir "$notebook"
		else
			echo Deleting files aborted ... aborting deleting notebook $notebook
		fi
	fi
}

notebook-rename() {
	MVCP="$1"
	shift

	if [ "$MVCP" = "cp" ] ; then
		MVCP="cp -r "
	fi

	notebook="$NOTESDIR/$@"
	read -p "Please enter new name for note: "  newname
	newnotebook="${NOTESDIR}/${newname}"

	case $MVCP in 
		"cp")	processing="copying ";;
		"mv")	processing="moving ";;
	esac

	if [ -d "$notebook" ] ; then
		echo $notebook exists .... $processing
		$MVCP  "$notebook" "$newnotebook"
	else
		echo Note $notebook does not exist, aborting...
	fi
}

notebook-list () {
	ls "${NOTESDIR}" | sed 's/DEFAULT//; s/USE//; s/config//' | column | more 
}

#
# OTHER COMMANDS
#

cmd_extension_or_show () {
	cmd_usage
}

cmd_usage () {
cat << ENDHELP

		Standard (?) Unix Notes system

GPG encrypted notes system for BSD and Linux systems

SYSTEM:

	notes init		initialize notes system
	notes newkey		change GPG key 
	notes help		show help
	notes version		show version
	notes show|ls|list	list notes in current notebook


NOTES MANAGEMENT:

	notes find|search 			find notes
	notes insert|add note_title		add a note
	notes import     file			import a text file as a note
	notes rename|mv  note_title		rename a note (will prompt for new name)
	notes copy|cp    note_title		copy a note (will prompt for new name)
	notes delete|rm  note_title		delete a note
	notes edit|ed    note_title		edit a note


NOTEBOOK MANAGEMENT:
	
	notebook list|ls		list notebooks
	notebook default    notebook	change default notebook
	notebook use	    notebook	use a notebook
	notebook add|insert notebook	add a notebook
	notebook rename|mv  notebook	rename a notebook (will prompt for new name)
	notebook copy|cp    notebook	copy a notebook (will prompt for new name)
	notebook delete|rm  notebook	delete a notebook
	
ENDHELP
}

cmd_version () {
	echo "Version $VERSION"
}

cmd_view () {
	myoptions="$@"
	if [ "$1" = "" ]; then
		echo No note specified on command line
		exit 1
	fi
	case $PROGRAM in 
		"notes") note-view $myoptions;;
		"notebook") cmd_usage;;
	esac
}

cmd_show () {
	myoptions="$@"
	case $PROGRAM in 
		"notes") note-list $myoptions;;
		"notebook") notebook-list $myoptions;;
	esac
}

cmd_find () {
	echo cmd_find
}

cmd_insert () {
	myoptions="$@"
	case $PROGRAM in 
		"notes") echo my options = ${myoptions} ; note-add $myoptions;;
		"notebook") notebook-add $myoptions;;
	esac
}

cmd_import () {
	myoptions="$@"
	case $PROGRAM in 
		"notes") echo my options = ${myoptions} ; note-import $myoptions;;
		"notebook") cmd_usage;;
	esac
}

cmd_generate () {
	echo cmd_generate
}

cmd_delete () {
	myoptions="$@"
	case $PROGRAM in 
		"notes") echo my options = ${myoptions} ; note-delete $myoptions;;
		"notebook") notebook-delete $myoptions;;
	esac
}

cmd_edit () {
	myoptions="$@"
	case $PROGRAM in 
		"notes") echo my options = ${myoptions} ; note-edit $myoptions;;
		"notebook") notebook-edit $myoptions;;
	esac
}

cmd_copy_move () {
	myoptions="$@"
	case $PROGRAM in 
		"notes") echo my options = ${myoptions} ; note-rename $myoptions;;
		"notebook") notebook-rename $myoptions;;
	esac
}

cmd_grep () {
	echo grep
}

cmd_git () {
	echo git not implemented yet
}

cmd_newkey () {
	echo newkey
}

#########################
#			#
#	MAIN PROGRAM 	#
#			#
#########################

PROGRAM="${0##*/}"
COMMAND="$1"

case "$1" in
        init) shift;                    cmd_init "$@" ;;
        newkey) shift;                  cmd_newkey "$@" ;;
        help|--help) shift;             cmd_usage "$@" ;;
        version|--version) shift;       cmd_version "$@" ;;
        show|ls|list) shift;            cmd_show "$@" ;;
        view) shift;            	cmd_view "$@" ;;
        find|search) shift;             cmd_find "$@" ;;
        grep) shift;                    cmd_grep "$@" ;;
        insert|add) shift;              cmd_insert "$@" ;;
        import) shift;              	cmd_import "$@" ;;
        edit|ed|-e) shift;              cmd_edit "$@" ;;
        generate) shift;                cmd_generate "$@" ;;
        delete|rm|remove) shift;        cmd_delete "$@" ;;
        rename|mv) shift;               cmd_copy_move "mv" "$@" ;;
        copy|cp) shift;                 cmd_copy_move "cp" "$@" ;;
        git) shift;                     cmd_git "$@" ;;
        *)                              cmd_extension_or_show "$@" ;;
esac
exit 0


