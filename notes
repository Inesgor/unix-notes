#!/bin/sh  
#
#	STANDARD(?) UNIX NOTES 
#
# This is Unix Notes. An GPG encrypted notes system designed for privacy
#
# The idea came from 'pass' the standard unix password manager

# VARIABLES
VERSION=0.1
#NOTES_UMASK='077'
NOTESDIR="${HOME}/.notes"
DEFAULT_NOTEBOOK="${NOTESDIR}/notes"
DEFAULT_POINTER="${NOTESDIR}/DEFAULT"
USE_POINTER="${NOTESDIR}/USE"
GPGKEY=''
GPG_OPTS="--quiet --yes --compress-algo=none --no-encrypt-to" 
GPG="gpg"

#
# initialize notes system
#

cmd_init (){		# setup directories and GPG key  to be used
	# key id for encryption 
	#KEYID
	

	# set umask to this user only
	umask "${NOTES_UMASK:-077}"


	# make notes directory
	if [ ! -d "$NOTESDIR" ]; then
		echo Creating notes directory:  $NOTESDIR
		mkdir $NOTESDIR
	fi

	create_config

	# make default notebook

	echo making default notebook 'notes' 
	if [ ! -d "$DEFAULT_NOTEBOOK" ]; then
		mkdir $DEFAULT_NOTEBOOK
		echo Your default notebook $DEFAULT_NOTEBOOK has been created you may now create notes

		if [ ! -f "$DEFAULT_POINTER" ] ; then
			# point to DEFAULT_NOTEBOOK 
			ln -s $DEFAULT_NOTEBOOK $DEFAULT_POINTER 
		fi

		if [ ! -f "$USE_POINTER" ] ; then
			# point to DEFAULT_NOTEBOOK 
			ln -s $DEFAULT_NOTEBOOK $USE_POINTER 
		fi
	fi
}

create_config () {

	touch $NOTESDIR/config
	chmod 600 $NOTESDIR/config

	echo You have the following private keys on your keyring

	gpg -K

	echo By DEFAULT I will use the first key found as the key for encrypting
	echo If this is NOT what is required please edit $NOTESDIR/config to
	echo reflect the recipient you wish to use 
	echo You will need to edit the KEY parameter and set it to the email 
	echo address of the key you wish to use

	KEY="`gpg -K | grep uid | head -1 | sed 's/>$//; s/^.*<//'`"
	echo "KEY	$KEY" > $NOTESDIR/config

	echo Default config written:

	cat  $NOTESDIR/config

}

get_recipient() {
	KEY=`grep KEY $NOTESDIR/config | sed s/^KEY// | tr -d [:blank:]`
}

#
# note functions
#

note-add() {
	echo in note-add

	notefile="$USE_POINTER/$@"
	
	if [ -f "$notefile.gpg" ] ; then
		echo File exists ... cannot create
	else
		get_recipient 
		echo we will encrypt for $KEY

		touch "$notefile"

		# create temporary note file
		$EDITOR "$notefile"

		# spell check
		#aspell -c "$notefile"

		# encrypt note file
		$GPG -e -r $KEY $GPG_OPTS "$notefile"

		# delete temporary note file now that ${notefile}.gpgs now created 
		rm "$notefile"
	fi
}

note-view() {

	notefile="$USE_POINTER/$@"
	
	if [ -f "$notefile" ]; then 

		gpg -d "$notefile" | ${PAGER:-more} 

	elif [ -f "${notefile}.gpg" ]; then 

		gpg -d "${notefile}.gpg" | ${PAGER:-more}

	else 
		echo Note file does not exist
	fi
}

note-delete() {
	
	notefile="$USE_POINTER/$@"
	
	if [ -f "$notefile" ]; then 

		rm -i "$notefile" 

	elif [ -f "${notefile}.gpg" ]; then 

		rm -i "${notefile}.gpg" 

	else 
		echo Note file does not exist
	fi

}

note-rename() {

	echo argv = $@
	# parse command line 

	# get note filename
	
	# get new filename

	# rename file 
}

#
# notebook functions
#

notebook-add() {

	new_notebook="${NOTESDIR}/$@"

	echo $new_notebook

	if [ ! -d "$new_notebook" ] ; then
		mkdir "$new_notebook"
		chmod 700 "$new_notebook"
		echo Created new notebook called $new_notebook
	else
		echo Notebook exists ... cannot create
	fi
}

notebook-delete() {
	
	echo argv = $@
	notebook="${NOTESDIR}/$@"
	echo $notebook

	if [ ! -d "${notebook}" ] ; then
		echo Error: Notebook \'$notebook\' does not exist
		exit 1
	else
		echo Deleting files from $notebook

		rm -i ${notebook}/*.gpg
		
		if [ $? = 0 ] ; then 
			rmdir "$notebook"
		else
			echo Deleting files aborted ... aborting deleting notebook $notebook
		fi
	fi
}

notebook-rename() {

	echo argv = $@
	# parse command line

	# get notebook name

	# get notebook new name

	# rename notebook
}

#
# OTHER COMMANDS
#

cmd_extension_or_show () {
	echo inside cmd_extension_or_show

	cmd_usage
}

cmd_usage () {
echo cmd_usage
cat << ENDHELP

		Standard (?) Unix Notes system

GPG encrypted notes system for BSD and Linux systems

SYSTEM:

	notes init		initialize notes system
	notes newkey		change GPG key 
	notes help		show help
	notes version		show version
	notes show|ls|list	list notes in current notebook


NOTES MANAGEMENT:

	notes find|search 	find notes
	notes insert|add	add a note
	notes import		import a text file as a note
	notes rename|mv		rename a note
	notes delete|rm		delete a note
	notes edit|ed		edit a note


NOTEBOOK MANAGEMENT:
	
	notebook list|ls	list notebooks
	notebook default	change default notebook
	notebook use		use a notebook
	notebook add|insert	add a notebook
	notebook rename|mv	rename a notebook
	notebook delete|rm	delete a notebook
	



ENDHELP
}

cmd_version () {
	echo "Version $VERSION"
}

cmd_view () {

	myoptions="$@"
	
	if [ "$1" = "" ]; then
		echo No note specified on command line
		exit 1
	fi

	case $PROGRAM in 
		
		"notes") note-view $myoptions;;
		"notebook") cmd_usage;;
	esac
}

cmd_show () {
	echo cmd_show
}

cmd_find () {
	echo cmd_find
}

cmd_insert () {

	myoptions="$@"

	case $PROGRAM in 
	
		"notes") echo my options = ${myoptions} ; note-add $myoptions;;
		"notebook") notebook-add $myoptions;;
	esac
}

cmd_import () {
	echo cmd_import will import a text file as a notE
}

cmd_generate () {
	echo cmd_generate
}

cmd_delete () {
	myoptions="$@"

	case $PROGRAM in 
	
		"notes") echo my options = ${myoptions} ; note-delete $myoptions;;
		"notebook") notebook-delete $myoptions;;
	esac
}

cmd_edit () {
	echo cmd_edit
}

cmd_copy_move () {
	echo cmd_copy_move
}

cmd_grep () {
	echo grep
}

cmd_git () {
	echo git not implemented yet
}

cmd_newkey () {
	echo newkey
}

#########################
#			#
#	MAIN PROGRAM 	#
#			#
#########################



PROGRAM="${0##*/}"
COMMAND="$1"

case "$1" in
        init) shift;                    cmd_init "$@" ;;
        newkey) shift;                  cmd_newkey "$@" ;;
        help|--help) shift;             cmd_usage "$@" ;;
        version|--version) shift;       cmd_version "$@" ;;
        show|ls|list) shift;            cmd_show "$@" ;;
        view) shift;            	cmd_view "$@" ;;
        find|search) shift;             cmd_find "$@" ;;
        grep) shift;                    cmd_grep "$@" ;;
        insert|add) shift;              cmd_insert "$@" ;;
        import) shift;              	cmd_import "$@" ;;
        edit|ed|-e) shift;              cmd_edit "$@" ;;
        generate) shift;                cmd_generate "$@" ;;
        delete|rm|remove) shift;        cmd_delete "$@" ;;
        rename|mv) shift;               cmd_copy_move "move" "$@" ;;
        copy|cp) shift;                 cmd_copy_move "copy" "$@" ;;
        git) shift;                     cmd_git "$@" ;;
        *)                              cmd_extension_or_show "$@" ;;
esac
exit 0






